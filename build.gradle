plugins {
    id("com.github.johnrengelman.shadow") version "6.1.0"
    id("io.micronaut.application") version "1.2.0"
    id("nu.studer.jooq") version "4.2"
}

version = "0.1"
group = "micronaut.example"

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://oss.jfrog.org/oss-snapshot-local" }
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("micronaut.example.*")
    }
}

dependencies {
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.sql:micronaut-jooq")
    implementation("org.simpleflatmapper:sfm-jdbc:8.2.3")

    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("com.h2database:h2")

    jooqRuntime(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    jooqRuntime("com.h2database:h2")
}


application {
    mainClass.set("micronaut.example.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("1.8")
    targetCompatibility = JavaVersion.toVersion("1.8")
}

jooq {
    version = '3.14.4'
    devDb(sourceSets.main) {
        jdbc {
            driver = 'org.h2.Driver'
            url = 'jdbc:h2:mem:devDb;MVCC=TRUE;LOCK_TIMEOUT=10000;DB_CLOSE_ON_EXIT=FALSE;INIT=CREATE TABLE IF NOT EXISTS owner(id INT AUTO_INCREMENT, name VARCHAR(255) NOT NULL, age INT NOT NULL, CONSTRAINT owner_pk PRIMARY KEY (id))\\; CREATE TABLE IF NOT EXISTS pet (id UUID DEFAULT random_uuid() NOT NULL, name VARCHAR(255) NOT NULL, owner_id INT NOT NULL, type VARCHAR(255) NOT NULL, CONSTRAINT pet_pk PRIMARY KEY (id), CONSTRAINT pet_owner_id_fk FOREIGN KEY (owner_id) REFERENCES owner)\\;'
            user = 'sa'
            password = ''
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            database {
                name = 'org.jooq.meta.h2.H2Database'
                inputSchema = 'PUBLIC'
            }
            target {
                packageName = "micronaut.example.domain"
            }
            generate {
                jpaAnnotations = true
            }
            database {
                forcedTypes {
                    forcedType {
                        userType = 'micronaut.example.domain.Pet.PetType'
                        converter = 'micronaut.example.converters.PetTypeConverter'
                        includeExpression = 'PET\\.TYPE'
                    }
                }
            }
        }
    }
}

nativeImage {
    imageName("jooq-h2")
    args = ["--report-unsupported-elements-at-runtime"]
}
