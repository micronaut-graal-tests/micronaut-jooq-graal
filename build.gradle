plugins {
    id "com.diffplug.eclipse.apt" version "3.22.0"
    id "com.github.johnrengelman.shadow" version "6.0.0"
    id "nu.studer.jooq" version "4.2"
    id "org.flywaydb.flyway" version "6.4.4"
    id "application"
}

version "0.1"
group "example.jooq"

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://oss.jfrog.org/oss-snapshot-local" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    implementation enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion")
    jooqRuntime enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion")

    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-graal"
    annotationProcessor "io.micronaut:micronaut-validation"

    compileOnly "org.graalvm.nativeimage:svm"
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "jakarta.persistence:jakarta.persistence-api:2.2.2"
    implementation "io.micronaut.sql:micronaut-jooq", {
        exclude group: 'io.micronaut', module: 'micronaut-jdbc'
    }
    implementation "io.micronaut.flyway:micronaut-flyway"
    implementation "org.simpleflatmapper:sfm-jdbc:8.2.3"

    runtime "io.micronaut.sql:micronaut-jdbc-hikari"
    runtime "ch.qos.logback:logback-classic"
    runtime "org.postgresql:postgresql"
    jooqRuntime "org.postgresql:postgresql"

    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testCompile "org.junit.jupiter:junit-jupiter-api"
    testCompile "io.micronaut.test:micronaut-test-junit5"
    testRuntime "org.junit.jupiter:junit-jupiter-engine"
}

test.classpath += configurations.developmentOnly

mainClassName = "example.jooq.Application"

// use JUnit 5 platform
test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.addAll([
        '-parameters',
        // enables incremental compilation
        '-Amicronaut.processing.incremental=true',
        '-Amicronaut.processing.annotations=example.jooq.*',
        "-Amicronaut.processing.group=$project.group",
        "-Amicronaut.processing.module=$project.name",
    ])
}

shadowJar {
    mergeServiceFiles()
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
    if (gradle.startParameter.continuous) {
        systemProperties(
            'micronaut.io.watch.restart': 'true',
            'micronaut.io.watch.enabled': 'true',
            "micronaut.io.watch.paths": "src/main"
        )
    }
    systemProperties(
        "datasources.default.url": databaseUrl,
        "datasources.default.username": databaseUser,
        "datasources.default.password": databasePassword,
        "datasources.default.schema": databaseSchema
    )
}

flyway {
    url = databaseUrl
    user = databaseUser
    password = databasePassword
    schemas = [databaseSchema]
}

jooq {
    devDb(sourceSets.main) {
        jdbc {
            url = databaseUrl
            user = databaseUser
            password = databasePassword
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            database {
                inputSchema = databaseSchema
                excludes = 'flyway_schema_history'
            }
            target {
                packageName = "example.jooq.domain"
            }
            generate {
                jpaAnnotations = true
            }
            database {
                forcedTypes {
                    forcedType {
                        userType = 'example.jooq.domain.Pet.PetType'
                        converter = 'example.jooq.converters.PetTypeConverter'
                        includeExpression = 'PET\\.TYPE'
                    }
                }
            }
        }
    }
}

tasks.named("generateDevDbJooqSchemaSource") {
    dependsOn("flywayMigrate")
}
