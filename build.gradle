plugins {
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("io.micronaut.application") version "3.7.0"
    id("nu.studer.jooq") version "4.2"
    id("org.flywaydb.flyway") version "6.4.4"
}

version = "0.1"
group = "micronaut.example"

repositories {
    mavenCentral()
    maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("micronaut.example.*")
    }
}

dependencies {
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.sql:micronaut-jooq")
    implementation("io.micronaut.flyway:micronaut-flyway")
    implementation("org.simpleflatmapper:sfm-jdbc:8.2.3")

    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.postgresql:postgresql")

    jooqRuntime(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    jooqRuntime("org.postgresql:postgresql")
}

application {
    mainClass.set("micronaut.example.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("1.8")
    targetCompatibility = JavaVersion.toVersion("1.8")
}

tasks.withType(JavaExec) {
    systemProperties(
        "datasources.default.url": databaseUrl,
        "datasources.default.username": databaseUser,
        "datasources.default.password": databasePassword,
        "datasources.default.schema": databaseSchema
    )
}

flyway {
    url = databaseUrl
    user = databaseUser
    password = databasePassword
    schemas = [databaseSchema]
}

jooq {
    version = '3.14.4'
    devDb(sourceSets.main) {
        jdbc {
            url = databaseUrl
            user = databaseUser
            password = databasePassword
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            database {
                inputSchema = databaseSchema
                excludes = 'flyway_schema_history'
            }
            target {
                packageName = "micronaut.example.domain"
            }
            generate {
                jpaAnnotations = true
            }
            database {
                forcedTypes {
                    forcedType {
                        userType = 'micronaut.example.domain.Pet.PetType'
                        converter = 'micronaut.example.converters.PetTypeConverter'
                        includeExpression = 'PET\\.TYPE'
                    }
                }
            }
        }
    }
}

tasks.named("generateDevDbJooqSchemaSource") {
    dependsOn("flywayMigrate")
}

graalvmNative.toolchainDetection = false
graalvmNative {
    binaries {
        main {
            imageName.set('jooq-postgres')
        }
    }
}
